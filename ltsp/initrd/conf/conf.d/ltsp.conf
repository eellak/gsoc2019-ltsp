#!/bin/sh -n
# This file is part of LTSP, https://ltsp.github.io
# Copyright 2019 the LTSP team, see AUTHORS
# SPDX-License-Identifier: GPL-3.0-or-later

# Inject LTSP code under initramfs-tools

# Sourced by initramfs-tools init before any other scripts. Specifically:
# /conf/conf.d/*, /scripts/functions, /proc/cmdline, break:top,
# /scripts/init-top, break:modules, break:premount, /scripts/init-premount,
# break:mount, /scripts/local, /scripts/nfs, break:mountroot,
# /scripts/local-top, /scripts/local-premount, mountroot, /scripts/nfs-bottom,
# /scripts/local-bottom, break:bottom, /scripts/init-bottom, mount move run,
# break:init, run-init.
# Another way to hook would be rdinit=.

# Notes:
# It needs the .conf extension, it can't be .sh.
# /run exists at this point, but something clears it later on,
# so we can't move /ltsp to /run/ltsp now.
# Don't exit from here! It's sourced!
# Use functions and locals, to avoid namespace pollution

# Work around https://github.com/NetworkBlockDevice/nbd/issues/87
# Additionally, blockdev may be needed when nbd is not a single partition
patch_nbd() {
    if grep -qs 'systemd-mark$' /scripts/local-top/nbd; then
        sed 's/systemd-mark$/& -b 512; blockdev --rereadpt $nbdrootdev/' -i /scripts/local-top/nbd
    fi
}

# Work around https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1755863
patch_casper() {
    if [ -d /scripts/casper-bottom ]; then
        echo 'ln -s /dev/null /root/lib/systemd/system/cdrom.mount' \
            > /scripts/casper-bottom/25disable_cdrom.mount
        chmod +x /scripts/casper-bottom/25disable_cdrom.mount
    fi
}

install_ltsp_hooks() {
    local script dir entry order

    # If an LTSP5 boot was requested, return
    grep -qs "init=/sbin/init-ltsp" /proc/cmdline && return 0
    # If a casper boot was requested, return
    grep -qs "boot=casper" /proc/cmdline && return 0

    # Remove all LTSP5 scripts to prevent them from interfering.
    # Symlinking to /bin/true won't work since that's a symlink to busybox.
    for script in /scripts/*/*ltsp*; do
        test -f "$script" || continue
        echo '#!/bin/true' > "$script"
    done

    # Initramfs-tools run_scripts() sources /scripts/*/ORDER, which in turn
    # runs the scripts and reads possible output from /conf/param.conf.
    # Hook our scripts at the end of each ORDER, except for init-bottom.
    # E.g. ltsp-bottom in Ubuntu needs to run before udev moves /dev to /root/dev.
    for script in /scripts/init-bottom/ltsp-initrd-bottom; do
        mkdir -p "${script%/*}"
        # Busybox ln doesn't support -r
        ln -s /ltsp/ltsp.sh "$script"
        entry=$(printf "%s %s" "$script" '"$@"
[ -e /conf/param.conf ] && . /conf/param.conf')
        if [ "$script" != "${script#/scripts/init-bottom/}" ]; then
            if [ -f "${script%/*}/ORDER" ]; then
                order=$(cat "${script%/*}/ORDER")
            else
                order=""
            fi
            printf "%s\n%s\n" "$entry" "$order" >"${script%/*}/ORDER"
        else
            printf "%s\n" "$entry" >>"${script%/*}/ORDER"
        fi
    done
    # Don't search for a resume device
    rm -f /conf/conf.d/resume
    # Don't use an fstab
    rm -f /etc/fstab
    # TODO: to fsck or not to fsck? If it doesn't fsck read-only netmounts,
    # then it's best to leave the defaults, so that it checks local disks.
    # E.g. local disk that needs to be used as ltsphome, AND that has our rootfs.
    # export fastboot=y
}

patch_nbd
patch_casper
install_ltsp_hooks
unset patch_nbd
unset patch_casper
unset install_ltsp_hooks

# TODO: This hook is supposed to run after networking is configured and before
# root is mounted. Currently it's unused, but it may help if we ever want to:
#  * Repair wrong networking when proxyDHCP is used, and:
#    - Syslinux with IPAPPEND 2, or
#    - Grub with local kernel and remote server
#  * Possibly source client-conf.sh for $SERVER etc
#  * Patch NBD
#initrd_premount_main() {
#    true
#}
